buildscript {
  ext {
    springBootVersion = "1.2.5.RELEASE"
  }
  repositories {
    jcenter()
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
  }
}

apply plugin: 'spring-boot'
apply plugin: 'spinnaker-debpublish'

repositories {
  jcenter()
  maven { url "http://repo.spring.io/snapshot" }
}

dependencies {
    spinnaker.group "test"
    spinnaker.group "bootWeb"
    spinnaker.group "jackson"
    spinnaker.group "retrofitDefault"

    compile spinnaker.dependency("kork")
    compile spinnaker.dependency("korkWeb")
    compile spinnaker.dependency("jedis")
    compile spinnaker.dependency("guava")
    compile spinnaker.dependency("groovy")
    compile spinnaker.dependency("rxJava")
    compile spinnaker.dependency("retrofit")
    compile spinnaker.dependency("eurekaClient")

    compile 'org.yaml:snakeyaml:1.15'
    compile 'com.squareup.retrofit:converter-simplexml:1.5.1'
    testCompile 'com.squareup.okhttp:mockwebserver:2.1.0'
}

configurations.all {
    resolutionStrategy {
        force 'org.apache.log4j:log4j:1.2.17'
        force 'com.google.guava:guava:14.0.1'
        force 'commons-codec:commons-codec:1.7'
    }
    exclude group: 'javax.servlet', module: 'servlet-api'
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "org.mortbay.jetty", module: "servlet-api"
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'config'
        }
    }
}

jar {
    doFirst {
        exclude "${rootProject.name}.yml"
    }
}

run {
    classpath += configurations.provided
}

ideaConfig {
  mainClassName = 'com.netflix.spinnaker.igor.Main'
}

startScripts {
  doLast {
    unixScript.text = unixScript.text.replace('CLASSPATH=$APP_HOME', 'CLASSPATH=$APP_HOME/config:$APP_HOME')
    windowsScript.text = windowsScript.text.replace('set CLASSPATH=', 'set CLASSPATH=%APP_HOME%\\config;')
  }
}

applicationName = 'igor'
applicationDefaultJvmArgs = ["-Djava.security.egd=file:/dev/./urandom"]
applicationDistribution.from(project.file('config')) {
  into 'config'
}


ospackage {
  packageName = project.applicationName
  version = project.version.replaceAll("-SNAPSHOT", "")
  release '3'
  into "/opt/${project.applicationName}"
  from "${project.buildDir}/install/${project.applicationName}"
}
buildDeb {
  dependsOn installApp
}

tasks.bootRepackage.enabled = false
