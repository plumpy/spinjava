/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.netflix.spinnaker.SpinnakerProjectPlugin.JarFinder

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:1.1.7.RELEASE"
    classpath "com.netflix.nebula:gradle-ospackage-plugin:1.12.2"
  }
}

apply plugin: 'os-package'
apply plugin: 'spring-boot'

ideaConfig {
  mainClassName = 'com.netflix.spinnaker.front50.Main'
}

configurations.all {
  exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

sourceSets {
  main {
    resources {
      srcDir 'src/main/resources'
      srcDir 'config'
    }
  }
}

jar {
  doFirst { 
    exclude "${rootProject.name}.yml"
  }
}

startScripts {
  doLast {
    unixScript.text = unixScript.text.replace('CLASSPATH=$APP_HOME', 'CLASSPATH=$APP_HOME/config:$APP_HOME')
    windowsScript.text = windowsScript.text.replace('set CLASSPATH=', 'set CLASSPATH=%APP_HOME%\\config;')
  }
}

dependencies {
  compile project(":front50-core")
  compile project(":front50-aws")
  compile project(":front50-gce")
  compile project(":front50-cassandra")

  spinnaker.group "bootWeb"
  compile spinnaker.dependency("kork")
}

ospackage {
  packageName = rootProject.name
  version = project.version.replaceAll("-SNAPSHOT", "")
  release '3'
  into "/opt/${rootProject.name}"
  from "${project.buildDir}/install/${project.name}"
}

buildDeb {
  dependsOn installApp
  requires("openjdk-7-jre")
}

if (file("/opt/front50/lib/jamm-0.2.5.jar").exists()) {
  applicationDefaultJvmArgs = ['-javaagent:$APP_HOME/lib/jamm-0.2.5.jar']
} else {
  def javaAgent = getJvmArgs()
  applicationDefaultJvmArgs = [javaAgent]
}

String getJvmArgs() {
  def mainSourceSet = project.convention.getPlugin(JavaPluginConvention).sourceSets.main
  def jarFile = JarFinder.find("org.github.jamm.MemoryMeter", mainSourceSet.compileClasspath.files)
  if (jarFile) {
    "-javaagent:${jarFile.absolutePath}"
  } else {
    ""
  }
}
