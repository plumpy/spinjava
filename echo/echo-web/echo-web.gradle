/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}
apply from: "$rootDir/gradle/groovy-module.gradle"

apply plugin: 'spring-boot'
apply plugin: 'project-report'
apply plugin: 'spinnaker-debpublish'

springBoot {
    mainClass = 'com.netflix.spinnaker.echo.Application'
}

configurations.all {
    resolutionStrategy {
        force 'org.antlr:antlr-runtime:3.4'
        force 'com.google.guava:guava:14.0.1'
    }
}

dependencies {
    compile project(':echo-core')
    compile project(':echo-model')
    compile project(':echo-cassandra')
    compile project(':echo-elasticsearch')
    compile project(':echo-notifications')
    compile project(':echo-pipelinetriggers')
    compile project(':echo-scheduler')
    compile project(':echo-kafka')
    compile project(':echo-rest')
    compile spinnaker.dependency('kork')
    compile spinnaker.dependency('korkWeb')
    compile spinnaker.dependency('bootActuator')
    compile spinnaker.dependency('bootWeb')
    compile commonDependencies.springWeb
    compile commonDependencies.jacksonDatabind
    testCompile commonDependencies.spockSpring
    testCompile commonDependencies.springTest
}

tasks.withType(org.springframework.boot.gradle.run.BootRunTask) {
    def jamm = project.configurations.compile.find { it.name.startsWith('jamm') }
    if (jamm) {
        jvmArgs "-javaagent:${jamm}"
    }
}

test {
    // jamm is required when using prepared statements with in-memory C*
    def jamm = project.configurations.compile.find { it.name.startsWith('jamm') }
    if (jamm) {
        jvmArgs "-javaagent:${jamm}"
    }
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'config'
        }
    }
}

jar {
    doFirst {
        exclude "${rootProject.name}.yml"
    }
}

startScripts {
    doLast {
        unixScript.text = unixScript.text.replace('CLASSPATH=$APP_HOME', 'CLASSPATH=$APP_HOME/config:$APP_HOME')
        windowsScript.text = windowsScript.text.replace('set CLASSPATH=', 'set CLASSPATH=%APP_HOME%\\config;')
    }
}

applicationName = 'echo'
applicationDefaultJvmArgs = ["-Djava.security.egd=file:/dev/./urandom"]
applicationDistribution.from(project.file('config')) {
    into 'config'
}

ospackage {
    packageName = project.applicationName
    version = project.version.replaceAll("-SNAPSHOT", "")
    release '3'
    into "/opt/${project.applicationName}"
    from "${project.buildDir}/install/${project.applicationName}"
}

buildDeb {
  dependsOn installApp
  requires("openjdk-8-jre")
}
